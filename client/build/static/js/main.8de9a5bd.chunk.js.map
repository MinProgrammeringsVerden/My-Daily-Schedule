{"version":3,"sources":["components/AppNavbar.js","actions/taskActions.js","actions/actionType.js","components/TaskList.js","components/TaskModal.js","redusers/taskReduser.js","redusers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","settLoading","type","TaskList","deleteClicked","id","props","deleteTask","getTasks","tasks","task","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","style","background","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","TaskModal","modal","onChange","e","target","value","onSubmit","preventDefault","addTask","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","post","initialState","loading","combineReducers","action","filter","middlewares","thunk","store","createStore","rootReduser","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8de9a5bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Container,\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n  } from 'reactstrap';\n\n  class AppNavbar extends Component {\n\n      state = { \n        isOpen:false\n       };\n\n      toggle = () => {\n      this.setState({\n        isOpen:!this.state.isOpen\n      })\n    };\n\n      render() { \n          return ( \n           <div>\n             <Navbar color=\"info\" dark expand ='md' className=\"mb-5\" >\n                <Container>\n                    <NavbarBrand href=\"/\" className=\"ml-auto\">My Daily Schedule</NavbarBrand>\n                       <NavbarToggler onClick={this.toggle} />\n                           <Collapse isOpen={this.state.isOpen} navbar>\n                               <Nav className=\"ml-auto\" navbar>\n                                  <NavItem>\n                                    <NavLink href=\"/\">Tasks</NavLink>\n                                  </NavItem>\n                                </Nav>\n                          </Collapse>\n                </Container>\n            </Navbar>\n          </div>\n         );\n      }\n  }\n   \n  export default AppNavbar;","import {GET_TASKS , ADD_TASK , DELETE_TASK , LOADING} from '../actions/actionType';\nimport axios from 'axios';\n\nexport const getTasks = () => dispatch => {\n    dispatch(settLoading());\n    axios.get('/api/tasks')\n    .then(res => dispatch({\n            type: GET_TASKS,\n            payload: res.data\n        }));\n};\n\nexport const deleteTask = (id) => dispatch => {\n    axios.delete(`/api/tasks/${id}` )\n    .then(res => dispatch({\n            type: DELETE_TASK,\n            payload: id\n        }))\n    \n};\nexport const addTask = (task) => dispatch => {\n    axios.post('/api/tasks' ,task)\n    .then(res => dispatch({\n            type: ADD_TASK,\n            payload: res.data\n        }))\n    \n};\nexport const settLoading = () => {\n    return {\n        type : LOADING \n        \n    };\n};","export const GET_TASKS = 'GET_TASKS';\nexport const ADD_TASK = 'ADD_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const LOADING = 'LOADING';","import React, { Component } from 'react';\nimport { Container , Button ,  ListGroup, ListGroupItem } from 'reactstrap';\nimport {TransitionGroup , CSSTransition} from 'react-transition-group';\nimport {connect } from 'react-redux';\nimport {getTasks , deleteTask} from '../actions/taskActions';\nimport PropTypes from 'prop-types';\n\n\n\nclass TaskList extends Component {\n\n  componentDidMount(){\n    this.props.getTasks();\n  }\n\n  deleteClicked = (id) => {\n    this.props.deleteTask(id);\n    }\n  \n\n\n    render() { \n        const{tasks} = this.props.task\n        return ( \n            <Container>\n               <ListGroup>\n                    <TransitionGroup>\n                      {tasks.map(({_id, name}) => (\n                        <CSSTransition \n                          key={_id} \n                          timeout={500} \n                          classNames=\"task\">\n                            <ListGroupItem style ={{background: \"yellow\"}}  >\n                                <Button  \n                                 className = \"remove\"\n                                 color=\"danger\"\n                                 size =\"sm\"\n                                 onClick = {this.deleteClicked.bind(this ,_id)}\n                                 > &times;\n                                </Button>\n                                {name}\n                            </ListGroupItem> \n                        </CSSTransition>\n                      ))}\n                    </TransitionGroup>\n                </ListGroup>\n                \n            </Container>\n            \n\n         );\n    }\n};\nTaskList.propTypes = {\n  getTasks : PropTypes.func.isRequired , \n  deleteTask : PropTypes.func.isRequired , \n  task : PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  task : state.task\n});\n \nexport default connect(mapStateToProps, {getTasks , deleteTask}) (TaskList);","import React, {Component} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input} from 'reactstrap';\nimport {connect } from 'react-redux';\nimport {addTask} from '../actions/taskActions';\nimport PropTypes from 'prop-types';\n\n\nclass TaskModal  extends Component {\n    state = { \n        modal : false,\n        name :''\n     }\n\n     toggle =()=> {\n         this.setState({\n          modal: !this.state.modal\n         })\n     };\n\n     onChange = (e)=> {\n         this.setState({[e.target.name]:e.target.value})\n\n     }\n\n     onSubmit = (e) => {\n         e.preventDefault();\n         const task = {\n            name : this.state.name \n          };\n\n         this.props.addTask(task);\n         this.toggle();\n        };\n\n\n    render() { \n        return ( \n            <div>\n              <Button color=\"success\" onClick={this.toggle} style={{marginBottom:'3rem'}}>Add a task</Button>\n              <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                   <ModalHeader toggle={this.toggle}> New Task</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.onSubmit}>\n                                <FormGroup>\n                                    <Label for=\"task\">New task</Label>\n                                    <Input type=\"text\" name=\"name\" id=\"task\" placeholder =\"write a task\" onChange={this.onChange} />\n                                </FormGroup>\n                                <Button color=\"primary\">Task added</Button>\n                            </Form>\n                        </ModalBody>\n              </Modal>\n          </div>\n        );\n         \n    }\n};\n\nTaskModal.propTypes = {\n    addTask : PropTypes.func.isRequired , \n    task : PropTypes.object.isRequired\n  };\n\n const mapStateToProps = state =>({\n     task : state.task\n });\n\n\n\nexport default connect(mapStateToProps ,{addTask})(TaskModal) ;","import {GET_TASKS , ADD_TASK , DELETE_TASK  , LOADING} from '../actions/actionType';\n\nconst initialState = {\n    tasks : [],\n    loading:false\n  };\n\n\n  export default function(state = initialState , action){\n      switch(action.type){\n          case GET_TASKS:\n              return {\n                  ...state ,\n                  tasks : action.payload,\n                  loading: false\n                  \n                  \n              };\n          case DELETE_TASK:\n                return {\n                    ...state  , \n                 tasks : state.tasks.filter((task) => task._id !== action.payload)\n                }\n         case ADD_TASK:\n              return {\n                  ...state , \n               tasks :[action.payload, ...state.tasks] \n               };\n        case LOADING:\n              return {\n                  ...state , \n               loading:true\n               };\n          default:\n            return {\n                ...state\n            }\n      }\n  };","import { combineReducers } from 'redux';\nimport taskReduser from './taskReduser';\n\n\nexport default combineReducers({\n    task:taskReduser\n});","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReduser from './redusers/index'\n\nconst initialState = {};\n\nconst middlewares =[thunk];\n\nconst store = createStore(rootReduser , initialState, compose(applyMiddleware(...middlewares)));\n\nexport default store;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar';\nimport TaskList from './components/TaskList';\nimport TaskModal from './components/TaskModal';\nimport {Provider} from 'react-redux';\nimport {Container} from 'reactstrap';\nimport store from './store';\n\n class App extends Component {\n\n   render(){\n\n     return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar/>\n          <Container>\n             <TaskList/>\n              <TaskModal/>\n          </Container>\n      </div>\n      </Provider>\n    );\n\n   }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}